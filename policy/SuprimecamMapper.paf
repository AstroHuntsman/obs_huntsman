#<?cfg paf policy ?>

#root: "/data/Subaru"
calibRoot: "/data/price/miyatake/CALIB/dome/"
#registryPath: "/path/to/registry/"
needCalibRegistry: true
#calibRegistryPath: "/path/to/calibration/registry/"

camera:        "../suprimecam/description/Full_Suprimecam_geom.paf"
defects:    "../suprimecam/description/defects"
filters:    "../suprimecam/description/SuprimecamFilters.paf"

exposures: {
    raw: {
        template:    "%(field)s/%(dateObs)s/%(pointing)05d/%(filter)s/SUPA%(visit)07d%(ccd)1d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    postISRCCD: {
        template:    "%(outRoot)s/rerun/%(rerun)s/postISRCCD/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    visitim: {
        template:      "%(outRoot)s/rerun/%(rerun)s/visitim/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    calexp: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/corr/CORR%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    warp: {
        template:      "%(outRoot)s/rerun/%(rerun)s/warp/v%(visit)d-f%(filter)s/s%(patch)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "visit"
        columns:       "filter"
    }

    stack: {
        template:      "%(outRoot)s/rerun/%(rerun)s/stack/%(stack)05d/STK%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    chisquared: {
        template:      "%(outRoot)s/rerun/%(rerun)s/stack/%(stack)05d/CHI%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }
}

calibrations: {
    bias: {
        template:    "BIAS/%(dateObs)s/%(filter)s/%(mystery)s/BIAS-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "bias"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    dark: {
        template:    "DARK/%(dateObs)s/%(filter)s/%(mystery)s/DARK-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "dark"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    flat: {
        template:    "FLAT/%(dateObs)s/%(filter)s/%(mystery)s/FLAT-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "flat"
        columns: "ccd"
        columns: "filter"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
    }
    fringe: {
        template:    "FRINGE/%(dateObs)s/%(filter)s/%(mystery)s/FRINGE-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "fringe"
        columns: "ccd"
        columns: "filter"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
    }
}



datasets: {
    psf: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/PSF%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    src: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/SRC%(visit)07d%(ccd)1d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    source: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/SRC%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "PyfitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatch: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/OBJ%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.detection.PersistableSourceMatchVector"
        persistable:        "PersistableSourceMatchVector"
        storage:    "FitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    matchFull: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/MLA%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "PyfitsStorage"
	tables:		"raw"
    }
    icSrc: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/MS%(visit)07d%(ccd)1d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    log: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/logs/run.log"
        python:        "lsst.afw.detection.PersistableSourceMatchVector"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(outRoot)s/rerun/%(rerun)s/%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

    stacksources: {
        template:      "%(outRoot)s/rerun/%(rerun)s/stack/%(stack)05d/SRC%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    stackpsf: {
        template:      "%(outRoot)s/rerun/%(rerun)s/stack/%(stack)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    stackrgb: {
        # Will be read/written directly by the user; here for _filename only
        template:      "%(outRoot)s/rerun/%(rerun)s/stack/%(stack)05d/SRC%(patch)08d.tiff"
        python:        "lsst.afw.extensions.rgb.RgbImageF"
        persistable:   "RgbImageF"
        storage:       "SelfStorage"
        tables:        "None"
    }

}
