#<?cfg paf policy ?>

#root: "/path/to/data"
#calibRoot: "/path/to/calibration"
#registryPath: "/path/to/registry/"
needCalibRegistry: true
#calibRegistryPath: "/path/to/calibration/registry/"

camera:     "../suprimecam/Full_Suprimecam_geom.paf"
defects:    "../suprimecam/defects"
defaultLevel: "Ccd"

exposures: {
    raw: {
        template:    "%(field)s/%(dateObs)s/%(pointing)05d/%(filter)s/SUPA%(visit)07d%(ccd)1d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    visitim: {
        template:      "visitim/v%(visit)d-f%(filter)s/c%(ccd)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    calexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORR%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    wcs: {
        template: "%(pointing)05d/%(filter)s/corr/wcs%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }

    fcr: {
        template: "%(pointing)05d/%(filter)s/corr/fcr%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }
    detj: {
        template:      "%(pointing)05d/%(filter)s/corr/DETJ%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    dcor: {
        template:      "%(pointing)05d/%(filter)s/corr/DCOR%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    warp: {
        template:      "warp/v%(visit)d-f%(filter)s/s%(patch)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "visit"
        columns:       "filter"
    }

    stack: {
        template:      "stack/%(stack)05d/STK%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    diff: {
        template:      "diff/%(diff)05d/DIFF%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    chisquared: {
        template:      "stack/%(stack)05d/CHI%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    mosaicCalib: {
        template:    "%(outRoot)s/%(pointing)05d/%(filter)s/output/CALIB%(visit)07d%(ccd)1d-%(tract)d.fits"
        python:      "lsst.afw.image.ExposureU"
        persistable: "ExposureU"
        storage:     "FitsStorage"
        columns:     pointing
        columns:     filter
        columns:     visit
        columns:     ccd
        tables:      raw
        level:       Ccd
    }

    coaddTempExp: {
        template:    "%(outRoot)s/coaddTemp/%(filter)s/%(tract)d/TEMP%(visit)07d%(ccd)1d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }

}

calibrations: {
    bias: {
        template:    "BIAS/%(calibDate)s/%(filter)s/%(mystery)s/BIAS-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "bias"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    dark: {
        template:    "DARK/%(calibDate)s/%(filter)s/%(mystery)s/DARK-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "dark"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    bgflat: {
        template:    "BGFLAT/%(calibDate)s/%(filter)s/%(mystery)s/BGFLAT-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "bgflat"
        columns: "ccd"
        columns: "filter"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    flat: {
        template:    "FLAT/%(calibDate)s/%(filter)s/%(mystery)s/FLAT-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "flat"
        columns: "ccd"
        columns: "filter"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    fringe: {
        template:    "FRINGE/%(calibDate)s/%(filter)s/%(mystery)s/FRINGE-%(num)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "fringe"
        columns: "ccd"
        columns: "filter"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
}



datasets: {
    psf: {
        template:      "%(pointing)05d/%(filter)s/output/PSF%(visit)07d%(ccd)1d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    apCorr: {
        template:      "%(pointing)05d/%(filter)s/output/APC%(visit)07d%(ccd)1d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_visit
    }
    src: {
        template:      "%(pointing)05d/%(filter)s/output/SRC%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatch: {
        template:      "%(pointing)05d/%(filter)s/output/MATCH%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icSrc: {
        template:      "%(pointing)05d/%(filter)s/output/ICSRC%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    log: {
        template:      "%(pointing)05d/%(filter)s/logs/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

    stacksources: {
        template:      "stack/%(stack)05d/SRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }

    stackpsf: {
        template:      "stack/%(stack)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    stackrgb: {
        # Will be read/written directly by the user; here for _filename only
        template:      "stack/%(stack)05d/SRC%(patch)08d.tiff"
        python:        "lsst.afw.extensions.rgb.RgbImageF"
        persistable:   "RgbImageF"
        storage:       "SelfStorage"
        tables:        "None"
    }

    diffsources: {
        template:      "diff/%(diff)05d/SRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }

    diffpsf: {
        template:      "diff/%(diff)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    warppsf: {
        template:      "%(pointing)05d/%(filter)s/warp/WARPPSF%(visit)07d%(ccd)d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    processCcd_config: {
        template:      "%(pointing)05d/%(filter)s/processCcd_config/%(visit)07d%(ccd)1d.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/processCcd_metadata/%(visit)07d%(ccd)1d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_psf: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }

}
