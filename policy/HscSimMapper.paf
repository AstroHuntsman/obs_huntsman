#<?cfg paf policy ?>

# These should be relative to some $ROOT

#calibRoot: "/path/to/calibration/"
#registryPath: "/path/to/registry/"
needCalibRegistry: true
#calibRegistryPath: "/path/to/calibration/registry/"

camera:        "../hscSim/description/hscSim_geom.paf"
#defects:    "../hscSim/description/hscSim_defects.paf"
filters:    "../hscSim/description/hscSim_filters.paf"

exposures: {
    raw: {
        template:    "SIMS/%(field)s/%(dateObs).10s/%(pointing)05d/%(filter)s/HSCA%(visit)05d%(ccd)03d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    calexp: {
        template:    "rerun/%(rerun)s/%(pointing)05d/%(filter)s/corr/CORR%(visit)05d%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    warp: {
        template:      "rerun/%(rerun)s/warp/v%(visit)d-f%(filter)s/s%(skytile)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "visit"
        columns:       "filter"
    }

    stack: {
        template:      "rerun/%(rerun)s/stack/%(stack)s/s%(skytile)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_visit"
    }

}

calibrations: {
    bias: {
        template:    "BIAS/%(dateObs)s/%(filter)s/%(mystery)s/BIAS-%(num)05d%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "bias"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    dark: {
        template:    "DARK/%(dateObs)s/%(filter)s/%(mystery)s/DARK-%(num)05d%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "dark"
        columns: "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    flat: {
        template:    "FLAT/%(dateObs)s/%(filter)s/%(mystery)s/FLAT-%(num)05d%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "flat"
        columns: "ccd"
        columns: "filter"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
    }
    fringe: {
        template:    "FRINGE/%(dateObs)s/%(filter)s/%(mystery)s/FRINGE-%(num)05d%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "fringe"
        columns: "ccd"
        columns: "filter"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
    }
}


datasets: {
    psf: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/PSF%(visit)05d%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    src: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/SRC%(visit)05d%(ccd)03d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    source: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/SRC%(visit)05d%(ccd)03d.fits"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "PyfitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    matches: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/OBJ%(visit)05d%(ccd)03d.fits"
        python:        "lsst.afw.detection.PersistableSourceMatchVector"
        persistable:   "PersistableSourceMatchVector"
        storage:       "FitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    matchFull: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/MLA%(visit)05d%(ccd)03d.fits"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "PyfitsStorage"
	tables:		"raw"
    }
    matchedsources: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/output/MS%(visit)05d%(ccd)03d.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:   "PersistableSourceVector"
        storage:       "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    log: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/logs/run.log"
        python:        "str"
        persistable:   "str"
        storage:       "str"
	tables:	       "raw"
    }
    logDir: {
        template:      "rerun/%(rerun)s/%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "str"
        storage:       "str"
	tables:        "None"
    }
}
