--- Dustin pulled out the photo deblender, doing considerable violence to it
along the way.  Mostly, whole source files were pulled in.  Things I had to fake
are in  "fake.c".  The most significant thing is the cell profile-fitting code
from cellfitobj.c -- since the deblender doesn't need to galaxy profiles, only PSFs,
great violence was done.

Photo uses "makeprof.c" to create a cache file of compiled profiles.

etags src/*.cc src/photo/*.c include/lsst/meas/deblender/*.h include/lsst/meas/deblender/photo/*.h


(BEFORE)

phFitCellAsPsfFake
  phProfileExtract      -- objc -> CELL_STATS
  phProfileMean
  setup_cell_data       -- CELL_STATS -> fit_ctx
  cell_fit_psf
    cell_fit_model
      psf_cells_make

(AFTER)

phFitCellAsPsfFake
  // data:
  phProfileExtract      -- objc -> CELL_STATS cstats
  phProfileMean
  phCellProfSet         -- CELL_STATS cstats -> CELL_PROF fit_ctx
       --> this averages the symmetric sectors.
  // psf model:
  cell_fit_psf_model
       psf_cells_make   --   psf --> COMP_CSTATS
       --> touches fit_ctx




CELL_PROF -- in phExtract.h
CELL_STATS -- in phExtract.h

typedef struct {
   int id;				/* id of OBJECT1 that this CELL_STATS
					   refers to */
   int ncell;				/* number of cells */
   int nannuli;				/* number of annuli */
   int nannuli_c;			/* number of complete annuli */
   int annular;				/* true if a annular profile */
   float col_c, row_c;			/* centre used to extract profile,
					   or starting point of ridgeline */
   float col_1, row_1;			/* end point of ridgeline */
   int orad;				/* outer radius of profile */
   const REGION *syncreg;		/* sync-shifted central region */
   const float *radii;			/* radii of inner edges of annuli */
   const float *area;			/* areas of annuli */
	struct pstats *cells;		/* the data cells */
   struct cellgeom *geom;		/* geometry of cells */
   struct cellmod *mgeom;		/* (model-dependent) cell geometry */
} CELL_STATS;				/* pragma SCHEMA */

typedef struct {
   int ncell;				/* number of cells in {data,sig} */
   int is_median;			/* is data median profile? */
   float flux;				/* == sum(data*area) */
   float data[MAXCELLS];	        /* mean or median profile */
   float sig[MAXCELLS];			/* errors in data */
   float area[MAXCELLS];		/* number of pixels in data[] */
} CELL_PROF;				/* pragma SCHEMA */

// this one describes the geometry of a cell
struct cellgeom {
   int ann;				/* annulus index of cell */
   int sec;				/* sector index of cell */
   float n;				/* number of pixels in cell */
   float inner;				/* inner float radius of annulus */
   float outer;				/* outer float radius of annulus */
   float cw;				/* angle of clockwise boundary */
   float ccw;				/* angle of anti-clockwise boundary */
};

// This structure contains the quantities derived for a cell
struct pstats {
    int ntot;				/* total # elements */
    float area;				/* area used to find mean (in pixels)*/
    float qt[3];			/* quartiles */
    float mean;				/* mean */    
    float sig;				/* sigma--real or from iqr */
    int min;				/* min of kept data in histogram */
    int rng;				/* range of kept data in histogram */
    int nel;				/* 'relevant' # of elements */
    float sum;				/* sum of 'relevant' points */
    PIX *data;				/* pointer to data */
    enum {				/* processing flags */
       EXTRACT_NONE = 0,		/* no flags set, that is: */
    //      ...
    } flg;
};

typedef struct {
    int ncells;				/* number of cells */
    float totflux;			/* total flux in object (to infinity)*/
    float sigma2;			/* second moment of object */
    float *mean;			/* mean profile */
    float *median;			/* median profile */
    float *sig;				/* errors */
    float *mem;				/* malloced space for mean/median and sig */
} COMP_CSTATS;


phInitProfileExtract() -- sets up "cellgeom", etc
CELL_STATS* phProfileGeometry() -- retrieves partial CELL_STATS with geometry set.

phGetCellid() ?
CELL_STATS* phProfileGetLast() -- returns &cstats global

phObjectNewFromProfile?
phProfileExtract -- REGION to CELL_STATS

NSEC = 12     // 12 sectors (30 degrees)
NANN = 15     // 15 radial bins (annuli) (max ~ 657 pix)
NCELL = 169

MAXCELLS 85   // --> symmetrised


cellval[cell][j] -- cache of pixels in a cell

 * The cells are numbered along
 * annuli counterclockwise from the -x axis and then to the adjoining
 * (outer) annulus. Cell 0 is the center cell, cell 1 the first cell
 * in annulus 1, etc. There are only 8 cells in the first annulus, so
 * some games are played to populate the 12 sectors.

 * The sector index is (cell-1)%NSEC, the annulus index (cell-1)/NSEC + 1
 * for cell > 0., and the cell number is (annulus-1)*NSEC + sector + 1


