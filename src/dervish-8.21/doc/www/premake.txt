premake is a small sheel script whose function is to aid DERVISH
developers and allow the re-building of dervish at collaborating 
sites.  

It's function is to:

1) Resolve the differences between supported operating systems
(currently SunOS and IRIX).

2) Allow the user to select among supported compilers (e.g. gcc or acc under
SunOS), where supported alternates exsist, and to select a set of
compiler switches appropraite for producing optimised or unoptimzed code.

3) Allow the selection of a target in the make file.

Premake flags and usage
-----------------------

Usage: premake [premakeflags] [targets]

Valid flags are:
	-?		Print this message
	-cc env		Choose a compilation environment (ACC, GCC, IRIX)
	-cflags str	Additional flags for the C compiler
	-debug		Compile for a debugger
	-filter		Filter out some compiler warnings
	-help		Print this message
	-nopgplot	Don't link with pgplot
	-optimise	Compile with optimisation
	-quiet		Suppress some chatter
flags may be upper of lower case, and may be truncated to 3
characters. All other flags are passed to make.

If you define the environment variable $PREMAKEFLAGS, it specifies the
_first_ arguments to premake. For example, if you say
	PREMAKEFLAGS="-quiet -filter"; export PREMAKEFLAGS
or
	setenv PREMAKEFLAGS "-quiet -filter"
and then
	premake -debug -optimise bar.o
premake will be run with the -quiet and -filter flags in addition to
debug and optimise (a combination that is both useful and supported on
some platforms).

When you run premake, the make variable $(PMFLAGS) is set to the
options passed to make, which allows makefiles to themselves call
make, for example
	(cd $(FOO); $(MAKE) $(MFLAGS) $(PMFLAGS) libfoo.a )	


Targets in the makefile for CVS developers.  Required features:
---------------------------------------------------------------

1)default: required to be first target in file. If the user types
"make" informs the user to use premake  and then exits.

2)clean -- Removes files generated by making -- gets you back to a state
where you everythin would be re-made.  In particular, one should be
able to Make under SunOS, claen, and then Make under IRIX, without 
sun .o, .a and  executables laying about.

3)install -- Copies the appropriate files from the development rooted
area into a distribution area.  Then builds/runs any tests which check
to see if the area has been copied correctly or ahev compiled-in
dependencies for path names, etc. 

4) Really interesting targets -- Not specified are the actual targets
which do the building.  It is probably possible to specify them in
general.  Premake should present a list of interesting targets, and
it should supports making ANY target in the makefile.  Premake
should support passing flags and macro definitions to make.

5) It IS a feature of premake that the whole package is NOT recompiled
just because the compiler or the Debug options were changed. Instead,
it is supported that you can remove all of the .o files, use
premake to build the package Optimized, and then rebuild a single file
unoptimized, if slow code ahead of your code is a problem.

 
