#!/usr/local/bin/perl
#
# DESCRIPTION:	Perl script to search all html files in given directory for
#		TITLE and NAME html tags containing the given string.  A
#		selectable html menu is generated.  NOTE: This is a test
#		script written for our immediate needs - use at your own risk.
#		This is not a CGI-compliant script, but it will be sometime in
#		the future.
#
# AUTHOR:	Gary Sergey (sergey@fndaub.fnal.gov)
#
$param1  = shift(@ARGV);
$pattern = shift(@ARGV);
%aarray = '';
$cindex = 0;

if ($param1 =~ m#-index#) {
  $~ = 'STARTINDEX';
  write;
  $htmldir = ".";
  $cindex = 1;
  printf "<H1>%s Index</H1>\n", $pattern;
} elsif ($param1 =~ m#([a-zA-Z0-9_/]*)/[a-zA-Z0-9_]#) {
  $~ = 'STARTSEARCH';
  write;
  $htmldir = $1;
  printf "<H1>%s</H1>\n", $pattern;
  printf "<P>Links matching '%s' in %s\n", $pattern, $htmldir;
} else {
  printf "Invalid paramater to search script\n";
  exit;
}  

open(HTMLDIR, "ls -l $htmldir/*.html|") || die "Can't ls html directory";
while(<HTMLDIR>) {
  if (/([a-zA-Z0-9_.]+\.html$)/) {
    $html_file = $1;
    open(HTML_FILE, "$htmldir/$1") || die "Can't open html file";
    while(<HTML_FILE>) {
    
      #
      # LOOK FOR ALL ANCHORS (I.E., "NAME" HTML TAGS)
      #
      if (m/<A\s*NAME\s*=\s*(.*)\/A>/i) {
        $tempo = $1;

        #
        # IF DESIRED TEXT IS PRESENT, THEN SAVE ANCHOR AND TEXT IN AN ARRAY
        #
        if (($cindex) || ($tempo =~ /$pattern/i)) {
          # Get rid of quotes (") and less than signs (<)
          $tempo =~ s/"|<//g;

          # Parse the anchor tag and the anchor text
          if ($tempo =~ /(.*)>(.*)/) {
            $anchor = $1;
            $text   = $2;
          }
          else {
            $anchor = $tempo;
            $text   = $tempo;
          }

          # Save anchor, filename, and text in an associative array
          $arrayIndex = $anchor . "###" . $html_file . "### ANCHOR";
          $aarray{$arrayIndex} = $text;

        } #end if ($tempo...

      #
      # LOOK FOR ALL TITLES (I.E., "TITLE" HTML TAGS)
      #
      } elsif (m/<TITLE>\s*(.*)<\/TITLE/i) {
        $tempo = $1;

        #
        # IF DESIRED TEXT IS PRESENT, THEN SAVE ANCHOR AND TEXT IN AN ARRAY
        #
        if (($cindex) || ($tempo =~ /$pattern/i)) {
          # Save dummy anchor, filename, and text in an associative array
          $arrayIndex = $tempo . "###" . $html_file . "### TITLE";
          $aarray{$arrayIndex} = $tempo;
        } #end if ($tempo...

      } #end if (/NAME...
    } #end while(<HTML_FILE>...

  close(HTML_FILE);
  } #end if (/(\w+\.html$)/...

} #end while(<HTMLDIR>...
close(HTMLDIR);

#
# CREATE LINKS FOR MATCHING TEXT
#
printf "<UL>";
foreach $arrayIndex (sort keys(%aarray)) {
  # Create a link to the anchor
  $text = $aarray{$arrayIndex};
  ($anchor, $filename, $htype) = split(/###/, $arrayIndex, 3);
  if ($htype =~ m/TITLE/i) {
     printf "<LI><A HREF=\"%s\">%s</A>\n", $filename, $text;
  } else {
     printf "<LI><A HREF=\"%s#%s\">%s</A>\n", $filename, $anchor, $text;
  }
} #end foreach...

$~ = 'ENDHTML';
write;
exit;

#
# FORMAT STATEMENTS
#
format STARTSEARCH =
Context-Type: text/html

<HTML>
<TITLE>Search Script Menu Page</TITLE>
.

format STARTINDEX =
<HTML>
<TITLE>Index Page</TITLE>
.

format ENDHTML =
</UL>
</HTML>
.
