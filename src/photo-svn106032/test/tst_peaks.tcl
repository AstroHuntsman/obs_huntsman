source [envscan \$PHOTO_DIR]/etc/photoStartup.tcl
source [envscan \$PHOTO_DIR]/test/tst_procs.tcl

#
# create regions with objects in them, then test objectPeaksFind
#
# n.b. The region for test "foo" is created by proc make_region_foo
#

################################################################
#
# given a region, and a sky value, run the object finder to find all
# pixels above sky, and use this to generate an OBJC, which is then returned
#
proc find_objmask {reg} {
   global fparams sky
   
   set nrow [exprGet $reg.nrow]
   set ncol [exprGet $reg.ncol]

   set lev [vectorExprEval $sky+20]
   set bsky [binregionNewFromConst 0]
   set objects [regFinder $reg $lev $fparams]
   
   binregionDel $bsky; vectorExprDel $lev

   set obj [chainElementGetByPos $objects HEAD]
   set om [handleBindFromHandle [handleNew] *$obj.sv<0>]
   handleSet $obj.sv<0> 0; handleDel $obj

   objectChainDel $objects

   return $om
}

#
# Here are the test regions
#
proc make_region_0 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {10.5 10.5 104} \
		 {20.5 15.5 102} \
		 ]

   set reg [regNew 30 30]; regIntSetVal $reg 1

   foreach val $vals {
      eval regPixSetWithDbl $reg $val
   }

   set type "all";				# find all the peaks

   return $reg;
}

proc make_region_1 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {10.5 10.5 100} \
		 ]

   set reg [regNew 20 20]; regIntSetVal $reg 1

   regPixSetWithDbl $reg 10 10 100
   regPixSetWithDbl $reg 11 10 99

   set type "all";				# find all the peaks

   return $reg;
}

proc make_region_2 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {11 10.5 100} \
		 ]

   set reg [regNew 20 20]; regIntSetVal $reg 1

   regPixSetWithDbl $reg 10 10 100
   regPixSetWithDbl $reg 11 10 100

   set type "all";				# find all the peaks

   return $reg;
}

proc make_region_3 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {25.5 5.5 101} \
		 {25.5 25.5 100} \
		 ]

   set reg [regNew 30 30]; regIntSetVal $reg 1
   set sreg [subRegNew $reg 20 20 10 0]; regIntSetVal $sreg 10; regDel $sreg
   set sreg [subRegNew $reg 10 10 20 0]; regIntSetVal $sreg 20; regDel $sreg

   regPixSetWithDbl $reg 19 10 20
   regPixSetWithDbl $reg 25 5  101
   regPixSetWithDbl $reg 25 25 100
   
   set type "all";				# find all the peaks

   return $reg;
}

proc make_region_4 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {3.5 3.5 100} \
		 {6.5 0.5 200} \
		 {11.5 0.5 100} \
		 ]

   set reg [regNew 15 10]; regIntSetVal $reg 1

   add_to_reg $reg  13 0 "  0   0  89  79  69  59"
   add_to_reg $reg  12 0 "  0  89  79  69  59"
   add_to_reg $reg  11 0 " 99  89  79  69  59"

   add_to_reg $reg  8 0 "  0   0  99  99  99  99  99"
   add_to_reg $reg  7 0 "  0  99  99  99  99  99"
   add_to_reg $reg  6 0 "199  99  99  99  99"

   add_to_reg $reg  4 0 "  0   0  99  99  99  99  99"
   add_to_reg $reg  3 0 "  0  99  99  99  99  99"
   add_to_reg $reg  2 0 " 99  99  99  99  99"

   set type "all";				# find all the peaks
   
   return $reg;
}

proc make_region_5 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
                 {7.5 17.5 201} \
		 {5.5 10.5 201} \
		 {15.5 10.5 201} \
		 {16.5 7.5 101} \
                 {12.8333 14.5 100} \
                 {10.16667 14.5 100} \
		 ]

   set reg [regNew 20 20]; regIntSetVal $reg 1

   add_to_reg $reg  7 5 "  0   0   0  99   0   0"
   add_to_reg $reg  6 5 "  0   0  99   0  99   0"
   add_to_reg $reg  5 5 " 99  99  99   0  99 200"

   add_to_reg $reg  7 12 "  0  99   0  99   0 200"
   add_to_reg $reg  6 12 "  0   0  99   0  99   0"

   add_to_reg $reg 10 12 "  0  99   0  99"
   add_to_reg $reg  9 12 "  0   0  99   0"

   add_to_reg $reg 13 12 "  0   0  99   0"
   add_to_reg $reg 12 12 "  0  99   0  99"

   add_to_reg $reg  17 5 "  0   0   0 100 100   0"
   add_to_reg $reg  16 5 "  0   0 100   0   0   0"
   add_to_reg $reg  15 5 "100 100   0   0 100 200"

   set type "all";				# find all the peaks

   return $reg;
}

proc make_region_6 { _vals _type } {
   upvar $_vals vals $_type type

   set vals [list \
		 {15.5 18.5 194} \
		 {18.5 18.5 177} \
		 {24.5 16.5 133} \
		 { 6.5 20.5 130} \
		 {23.5 14.5 126} \
		 {28.5 16.5 121} \
		 ]

   set reg [regNew 35 35]; regIntSetVal $reg 106
   set sreg [subRegNew $reg 33 29 1 3]; regClear $sreg;

  add_to_reg $sreg  0 0 "114 104 109 115 108 109 103 102 106 106 106 102 113 \
          108 104 105 114 115 120 112 113 117 115 110 107 108 117 107 112 "
  add_to_reg $sreg  1 0 "107 100 103 109 102 103 104 109 110 102 101 110 111 \
          103 107 114 114 107 112 113 118 105 109 110 102 108 107 101 102 "
  add_to_reg $sreg  2 0 "112 110 105 102 102 101 104 111 109 107 108 106 114 \
          106 105 114 116 119 118 113 122 111 115 104 107 103 115 108 112 "
  add_to_reg $sreg  3 0 "110 109 103 103 103 111 110 106 99 100 103 106 104 \
          108 118 109 110 118 119 124 118 115 117 111 113 112 100 108 111 "
  add_to_reg $sreg  4 0 "110 105 108 100 98 107 102 103 103 108 107 110 108 \
          112 119 118 121 122 131 120 119 118 111 115 113 106 108 109 103 "
  add_to_reg $sreg  5 0 "108 113 104 110 103 113 107 105 114 112 101 103 111 \
          119 115 127 116 136 134 131 130 118 114 104 119 105 108 107 104 "
  add_to_reg $sreg  6 0 "106 102 110 109 103 106 108 105 107 106 107 108 116 \
          112 110 125 128 132 134 126 120 120 112 106 104 106 105 110 109 "
  add_to_reg $sreg  7 0 "113 107 105 103 101 106 106 107 113 104 108 100 103 \
          114 124 123 128 137 142 125 123 110 114 112 113 102 113 105 102 "
  add_to_reg $sreg  8 0 "113 105 108 100 99 108 102 101 109 108 110 114 114 \
          107 122 132 143 141 142 130 128 121 111 103 109 112 105 101 101 "
  add_to_reg $sreg  9 0 "104 113 104 102 109 103 110 99 106 110 118 113 113 \
          117 136 133 143 157 149 132 123 121 114 116 105 105 106 102 105 "
  add_to_reg $sreg 10 0 " 104 103 100 102 112 104 104 105 108 110 110 116 \
          111 122 127 145 163 151 150 131 121 122 111 108 106 100 110 103 107 "
  add_to_reg $sreg 11 0 " 100 114 108 111 108 106 100 100 113 108 105 114 117 \
          124 140 146 169 163 145 131 121 123 103 102 105 112 105 100 111" 
  add_to_reg $sreg 12 0 " 106 109 107 98 105 117 104 111 105 113 117 120 116 \
          131 147 166 174 161 152 133 113 111 113 111 107 111 99 102 99 "
  add_to_reg $sreg 13 0 " 103 112 106 101 112 104 103 103 115 107 118 111 129 \
          135 150 177 183 172 152 132 114 112 109 115 111 108 104 103 111 "
  add_to_reg $sreg 14 0 " 104 99 104 100 108 108 107 107 108 114 121 114 132 \
          136 167 200 189 159 144 130 118 114 107 109 116 113 104 102 106 "
  add_to_reg $sreg 15 0 " 96 103 118 108 106 103 111 105 119 102 113 129 133 \
          136 170 190 193 153 138 122 124 111 106 112 103 101 112 110 104 "
  add_to_reg $sreg 16 0 " 107 108 115 111 107 111 107 111 103 119 117 118 133 \
          144 167 175 171 149 140 126 113 113 108 105 109 106 111 111 111 "
  add_to_reg $sreg 17 0 " 102 104 109 100 103 108 105 106 104 104 116 125 131 \
          152 163 183 169 142 128 114 119 104 110 112 101 101 97 104 108 "
  add_to_reg $sreg 18 0 " 96 110 96 106 107 105 101 103 112 115 118 128 135 \
          156 164 162 144 143 122 119 122 115 115 107 107 111 106 106 106 "
  add_to_reg $sreg 19 0 " 109 106 116 95 98 115 101 112 104 119 114 123 137 \
          141 151 156 139 128 119 107 115 111 106 113 107 107 101 104 112 "
  add_to_reg $sreg 20 0 " 106 102 103 103 103 109 109 110 103 120 119 126 127 \
          150 142 140 134 128 123 114 107 105 106 109 117 105 111 109 111 "
  add_to_reg $sreg 21 0 " 107 106 116 108 105 106 111 108 118 110 110 121 129 \
          136 143 142 134 123 114 106 103 112 107 117 107 112 104 113 108 "
  add_to_reg $sreg 22 0 " 107 102 103 105 107 103 108 110 119 111 109 132 121 \
          131 134 135 124 110 120 117 113 110 108 103 109 102 108 106 109 "
  add_to_reg $sreg 23 0 " 114 103 115 103 106 100 99 106 112 107 118 127 126 \
          139 123 128 118 120 118 106 99 107 103 104 103 105 102 105 104 "
  add_to_reg $sreg 24 0 " 100 100 102 103 106 108 97 102 117 112 121 123 133 \
          129 127 128 119 119 107 114 113 111 104 108 106 113 105 112 104 "
  add_to_reg $sreg 25 0 " 99 105 111 104 103 113 110 106 105 113 123 121 124 \
          131 118 107 121 103 109 108 108 103 108 107 107 107 100 108 103 "
  add_to_reg $sreg 26 0 " 105 98 104 102 116 109 99 111 110 116 108 118 126 \
          116 119 113 114 108 107 103 107 112 106 110 105 106 101 101 113 "
  add_to_reg $sreg 27 0 " 115 107 102 101 112 105 107 108 109 113 116 117 \
          123 127 118 108 110 113 105 110 116 104 104 104 103 102 103 104 104 "
  add_to_reg $sreg 28 0 " 115 107 105 110 104 106 109 112 109 118 115 112 \
          122 109 115 114 108 105 102 110 107 108 100 105 113 115 111 112 104 "
  add_to_reg $sreg 29 0 " 98 99 105 108 104 103 108 115 119 120 116 118 125 \
          111 112 107 112 117 101 103 107 114 101 108 108 103 107 108 111 "
  add_to_reg $sreg 30 0 " 104 111 111 101 106 107 115 116 105 106 107 117 118 \
          114 115 106 101 108 110 118 106 108 93 103 107 107 109 108 104 "
  add_to_reg $sreg 31 0 " 109 105 100 104 111 102 109 101 110 108 112 118 107 \
          104 118 106 105 112 112 103 106 108 105 106 101 105 110 107 104 "
  add_to_reg $sreg 32 0 " 101 104 108 99 102 101 112 103 107 112 110 115 106 \
          110 113 107 105 117 104 114 114 103 106 111 105 101 98 98 106 "
  regDel $sreg
#
# change the sky value to $sky
#
   global sky
   regIntConstAdd $reg [expr $sky-106]

   set type "finder";				# run object finder
   
   return $reg
}

proc make_region_6a { _vals _type } {
   upvar $_vals vals $_type type

   set reg [make_region_6 vals type]

   uplevel set delta_6a 5
   set vals [list \
		 {15.5 18.5 194} \
		 {18.5 18.5 177} \
		 {24.5 16.5 133} \
		 ]

   return $reg
}

proc make_region_6b { _vals _type } {
   upvar $_vals vals $_type type

   set reg [make_region_6 $_vals $_type]

   set vals [list \
                 {15.5 18.5 194} \
                 {18.5 18.5 177} \
                 {24.5 16.5 133} \
                 { 6.5 20.5 130} \
                 {23.5 14.5 126} \
                 {28.5 16.5 121} \
                 {30.5 15.5 119} \
                 {12.5 24.5 117} \
                 {19.5 23.5 116} \
                 { 1.5 21.5 114} \
                 {30.5 12.5 114} \
                 {21.5 12.5 114} \
                 { 6.5 27.5 113} \
                 {17 12 113} \
                 {23.5 11.5 113} \
                 {31.5 22.5 112} \
                 {32.5 17.5 112} \
                 {10.5 13.5 112} \
                 {16.5  5.5 112} \
                 { 1.5 29.5 111} \
                 {22   27   111} \
                 {33.5 20.5 111} \
                 {30.5 20.5 111} \
                 {25.5 11.5 111} \
                 {13.5  8.5 111} \
                 {15.5 27.5 110} \
                 {10.5 26.5 110} \
                 {28.5 23.5 110} \
                 {27.5  7.5 110} \
                 {22.5  5.5 110} \
                 {20.5  5.5 110} \
                 { 3.5 29.5 109} \
                 {29.5 28.5 109} \
                 {14.5 11.5 109} \
                 {20.5  8.5 109} \
                 { 1.5  6.5 109} \
                 {24.5  5.5 109} \
                 {29    3.5 109} \
                 {30.5 24.5 108} \
                 {33.5 23   108} \
                 { 3.5 15.5 108} \
                 { 6.5 11.5 108} \
                 {12.5  4.5 108} \
                 {24.5  3.5 108} \
                 { 1.5  3.5 108} \
                 {27.5 31.5 107} \
                 {22.5 30.5 107} \
                 { 8.5 29.5 107} \
                 {25.5 28.5 107} \
                 { 8.5 27.5 107} \
                 { 1.5 15.5 107} \
                 { 8.5 11.5 107} \
                 { 6.5  8.5 107} \
                 { 6.5  4.5 107} \
                 { 9.5 3.83333 107} \
                 {20.5 31.5 106} \
                 { 3.5 31.5 106} \
                 { 1.5 31.5 106} \
                 {29.5 30.5 106} \
                 {25.5 30.5 106} \
                 {12.5 28.5 106} \
                 {33.5  9.5 106} \
                 {11.5  7.5 106} \
                 {14.5  4.5 106} \
                 { 3.5  3.5 106} \
                 {14.5 31.5 105} \
                 {12.5 31.5 105} \
                 {19.5 28.5 105} \
                 {33.5 26.5 105} \
                 {27.5 10.5 105} \
                 { 3.5 10.5 105} \
                 {22.5  9.5 105} \
                 { 4.5  8.5 105} \
                 {32.5  7.5 105} \
                 {26.5  5.5 105} \
                 {31.5  5   105} \
                 {32.5 29.5 104} \
                 {27.5 26.5 104} \
                 {10.5  9.5 104} \
                 { 1.5  8.5 103} \
                 {33.5  5.5 102} \
		 ]
   
   set type "all";				# find all the peaks

   return $reg
}

proc make_region_6c { _vals _type } {
   upvar $_vals vals $_type type

   set reg [make_region_6 $_vals $_type]

   set vals [list \
		 {15.5 18.5 194} \
		 {18.5 18.5 177} \
		 ]

   set type "cull:5";				# require peaks to be more
						# than 5 cts above saddles
   
   return $reg
}

proc make_region_7 { _vals _type } {
   upvar $_vals vals $_type type

   set type "finder";				# run object finder

   # set the correct answers
   set vals [list \
		 {32.5 33.5 11258}
		 ]

  set reg [regNew 67 67]
  regIntSetVal $reg 106
  set sreg [subRegNew $reg 27 27 20 20]; regIntSetVal $sreg 0; regDel $sreg
  add_to_reg $reg 20 20 "112 108 116 109 111 114 107 115 113 106 112 120 104 \
       103 117 100 110 103 110 103 105 107 108 112 105 107 109 "
  add_to_reg $reg 21 20 "118 110 100 108 109 114 109 103 109 108 114 102 112 \
       113 109 115 118 108 115 105 109 107 105 110 103 105 107 "
  add_to_reg $reg 22 20 "112 108 108 107 114 110 107 112 114 110 119 113 105 \
       123 117 108 103 110 106 113 111 106 109 113 110 101 103 "
  add_to_reg $reg 23 20 "118 107 102 109 106 106 107 113 114 113 118 113 115 \
       123 127 120 122 118 110 109 116 104 105 112 112 111 105 "
  add_to_reg $reg 24 20 "102 108 110 110 106 110 118 113 121 110 121 131 136 \
       137 137 130 131 117 116 125 107 114 116 112 109 110 111 "
  add_to_reg $reg 25 20 "113 114 113 106 111 114 107 119 120 130 147 159 181 \
       175 175 161 141 130 120 116 118 111 109 102 112 107 104 "
  add_to_reg $reg 26 20 " 110 106 114 113 112 112 114 124 132 165 180 202 233 \
       251 238 214 194 151 137 135 121 107 114 111 107 109 110 "
  add_to_reg $reg 27 20 " 103 110 112 110 118 112 118 134 168 198 254 313 362 \
       384 351 333 259 206 168 147 118 118 119 108 115 104 102 "
  add_to_reg $reg 28 20 " 102 110 106 113 105 122 131 156 197 257 355 448 533 \
       557 561 454 371 267 207 157 131 124 116 113 111 112 107 "
  add_to_reg $reg 29 20 " 110 109 114 111 114 128 142 167 244 334 482 625 840 \
       945 880 683 502 376 249 187 150 132 118 110 120 112 101 "
  add_to_reg $reg 30 20 " 109 110 108 113 121 128 152 183 285 425 612 959 \
       1975 3050 2304 1126 670 451 309 205 161 136 117 109 114 116 114 "
  add_to_reg $reg 31 20 " 117 112 113 111 122 130 158 207 307 463 724 1616 \
       5157 9170 6211 2017 804 503 345 229 167 123 115 119 106 112 108 "
  add_to_reg $reg 32 20 " 100 114 110 110 117 134 150 214 320 473 779 1827 \
       6321 11264 7632 2347 834 515 348 210 169 135 118 105 111 119 112 "
  add_to_reg $reg 33 20 " 102 107 120 111 115 120 146 209 289 436 670 1239 \
       3218 5338 3776 1486 726 485 311 206 165 130 117 105 112 114 109 "
  add_to_reg $reg 34 20 " 104 113 113 107 108 128 137 190 254 364 512 762 \
       1134 1498 1213 823 581 405 271 189 143 126 114 115 112 114 105" 
  add_to_reg $reg 35 20 " 104 100 115 110 111 121 129 158 210 299 409 521 632 \
       692 648 557 422 328 222 162 142 122 115 109 102 113 110 "
  add_to_reg $reg 36 20 " 104 108 104 108 118 120 121 139 175 219 294 368 435 \
       466 438 383 313 241 181 149 125 110 109 99 110 111 104 "
  add_to_reg $reg 37 20 " 104 106 115 114 107 113 124 127 142 184 204 244 285 \
       307 292 262 220 179 156 129 125 111 105 114 108 101 110 "
  add_to_reg $reg 38 20 " 99 106 102 102 107 112 119 120 141 136 160 180 198 \
       194 200 195 159 138 132 112 120 104 104 110 107 118 110 "
  add_to_reg $reg 39 20 " 102 107 112 115 115 109 109 108 117 125 126 138 136 \
       161 157 137 124 123 119 114 112 107 107 118 108 105 104 "
  add_to_reg $reg 40 20 " 115 109 101 115 112 102 107 113 118 124 118 118 131 \
       136 135 121 120 115 108 111 103 112 112 109 103 106 109 "
  add_to_reg $reg 41 20 " 97 100 108 112 112 118 111 102 112 120 117 111 112 \
       125 117 106 115 117 107 113 109 104 109 105 115 110 103 "
  add_to_reg $reg 42 20 " 97 109 113 106 101 118 111 111 114 117 107 120 113 \
       125 119 113 106 105 104 109 120 103 102 109 110 106 111 "
  add_to_reg $reg 43 20 " 112 106 98 114 107 111 102 104 108 107 115 111 103 \
       116 104 108 116 109 112 111 110 105 115 105 112 106 108 "
  add_to_reg $reg 44 20 " 105 105 108 102 99 119 111 110 108 113 102 102 106 \
       114 105 113 103 98 113 109 105 104 111 109 100 109 97 "
  add_to_reg $reg 45 20 " 100 102 108 110 110 109 105 112 106 108 102 97 112 \
       112 106 110 108 112 101 107 109 111 115 99 104 104 115 "
  add_to_reg $reg 46 20 " 113 101 115 100 106 106 108 109 101 105 114 114 107 \
       105 122 108 114 99 112 112 107 107 107 111 111 110 107 "
#
# change the sky value to $sky
#
   global sky
   regIntConstAdd $reg [expr $sky-106]

  return $reg
}

proc make_region_8 {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 {11.50  9.50 310} \
		 { 5.50  7.50 290} \
		 ]

   global sky
   set reg [regNew 15 15]; regIntSetVal $reg $sky

   add_to_reg $reg  11 5 "100 100 100 100 210"
   add_to_reg $reg  10 5 "100 200 100 150 100"
   add_to_reg $reg   9 5 "100 150 150 100 100"
   add_to_reg $reg   8 5 "201 100 150 100 100"
   add_to_reg $reg   7 5 "100 100 150 150 200"
   add_to_reg $reg   6 5 "190 100 100 100 100"
   add_to_reg $reg   5 5 "100 150 190 100 100"

   set type "cull:60";				# find all the peaks, with
						# saddlepoints > 10
   
   return $reg;
}

proc make_region_ellip {_vals _type} {
   upvar $_vals vals $_type type

   # set the correct answers
   set vals [list \
		 { 64.45 65.44 6767} \
		]

   global sky
   set reg [regNew 100 100]; regIntSetVal $reg $sky

   add_to_reg  $reg  45 45 "1114 1125 1135 1142 1148 1152 1155 1153 1151 1146 1139 1132 1122 1111 1100 1089 1079 1067 1056 1046 1037 1028 1022 1015 1011 1008 1005 1003 1002 1001 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 "
   add_to_reg  $reg  46 45 "1131 1145 1157 1168 1179 1185 1189 1192 1191 1185 1179 1170 1158 1146 1133 1118 1104 1091 1078 1066 1054 1045 1035 1025 1018 1014 1009 1005 1004 1002 1002 1000 1000 1000 1000 1000 1000 1000 1000 1000 "
   add_to_reg  $reg  47 45 "1147 1164 1180 1196 1211 1223 1231 1235 1238 1234 1229 1219 1206 1191 1174 1157 1140 1122 1106 1090 1076 1063 1052 1040 1030 1022 1015 1011 1007 1003 1002 1002 1000 1000 1000 1000 1000 1000 1000 1000 "
   add_to_reg  $reg  48 45 "1162 1183 1204 1226 1245 1264 1276 1287 1294 1295 1289 1279 1265 1249 1228 1207 1185 1162 1142 1122 1105 1086 1072 1058 1046 1034 1025 1019 1011 1007 1005 1003 1002 1001 1000 1000 1000 1000 1000 1000 "
   add_to_reg  $reg  49 45 "1174 1200 1228 1255 1281 1306 1328 1345 1358 1364 1362 1354 1341 1322 1299 1273 1245 1217 1190 1164 1140 1117 1098 1081 1066 1052 1038 1029 1019 1014 1010 1005 1004 1002 1001 1000 1000 1000 1000 1000 "
   add_to_reg  $reg  50 45 "1185 1215 1248 1282 1318 1350 1382 1411 1431 1445 1450 1447 1435 1414 1387 1356 1323 1288 1252 1218 1186 1158 1131 1109 1090 1071 1058 1043 1031 1023 1016 1010 1007 1004 1002 1001 1000 1000 1000 1000 "
   add_to_reg  $reg  51 45 "1193 1227 1265 1307 1351 1396 1439 1477 1511 1536 1552 1556 1548 1530 1501 1465 1424 1380 1336 1291 1248 1211 1177 1146 1119 1097 1079 1062 1047 1035 1025 1017 1011 1007 1004 1002 1002 1001 1000 1000 "
   add_to_reg  $reg  52 45 "1197 1236 1279 1328 1380 1436 1492 1546 1596 1637 1668 1684 1684 1671 1644 1604 1556 1501 1444 1387 1333 1282 1237 1196 1160 1130 1105 1084 1067 1050 1037 1027 1018 1011 1007 1004 1002 1002 1000 1000 "
   add_to_reg  $reg  53 45 "1197 1238 1286 1341 1403 1470 1540 1612 1681 1743 1793 1829 1846 1842 1818 1778 1722 1657 1586 1513 1443 1376 1315 1261 1214 1175 1140 1112 1089 1070 1053 1040 1028 1018 1011 1007 1004 1002 1002 1001 "
   add_to_reg  $reg  54 45 "1194 1237 1288 1348 1418 1495 1580 1668 1759 1846 1923 1985 2027 2043 2032 1994 1935 1858 1771 1679 1587 1500 1420 1348 1285 1231 1187 1150 1118 1093 1073 1056 1040 1028 1019 1012 1008 1005 1003 1002 "
   add_to_reg  $reg  55 45 "1186 1230 1284 1347 1421 1507 1604 1711 1823 1938 2048 2147 2223 2269 2281 2257 2198 2114 2009 1894 1778 1663 1558 1463 1379 1306 1247 1198 1156 1124 1096 1076 1057 1043 1029 1019 1013 1008 1005 1002 "
   add_to_reg  $reg  56 45 "1175 1218 1273 1338 1415 1507 1614 1735 1869 2012 2160 2301 2422 2514 2565 2569 2523 2435 2313 2173 2024 1876 1738 1611 1501 1405 1325 1260 1206 1162 1126 1099 1077 1058 1042 1031 1020 1011 1008 1005 "
   add_to_reg  $reg  57 45 "1161 1204 1257 1321 1400 1495 1607 1740 1891 2059 2242 2428 2606 2761 2871 2923 2909 2830 2697 2529 2343 2152 1971 1805 1659 1533 1427 1339 1268 1211 1166 1129 1099 1077 1058 1043 1030 1019 1012 1007 "
   add_to_reg  $reg  58 45 "1147 1188 1236 1299 1376 1471 1584 1722 1884 2073 2284 2515 2753 2980 3172 3302 3350 3303 3173 2978 2748 2506 2270 2053 1860 1696 1556 1441 1347 1273 1214 1167 1129 1100 1076 1058 1042 1029 1019 1011 "
   add_to_reg  $reg  59 45 "1132 1169 1214 1272 1345 1436 1548 1684 1851 2050 2284 2548 2839 3140 3429 3667 3817 3846 3746 3537 3261 2953 2649 2366 2115 1897 1717 1568 1447 1350 1273 1213 1165 1128 1098 1075 1056 1041 1028 1018 "
   add_to_reg  $reg  60 45 "1116 1149 1191 1243 1311 1395 1501 1634 1796 1996 2236 2520 2849 3214 3596 3961 4254 4417 4404 4215 3894 3509 3119 2752 2427 2148 1914 1722 1568 1445 1347 1270 1209 1161 1125 1096 1072 1053 1039 1026 "
   add_to_reg  $reg  61 45 "1099 1129 1166 1213 1275 1350 1448 1570 1724 1915 2151 2437 2781 3183 3636 4115 4573 4929 5090 4993 4662 4192 3691 3219 2803 2446 2151 1909 1713 1557 1434 1338 1261 1201 1156 1120 1092 1070 1052 1037 "
   add_to_reg  $reg  62 45 "1084 1110 1142 1185 1238 1306 1392 1502 1642 1817 2038 2311 2647 3054 3536 4086 4679 5246 5663 5785 5531 4996 4363 3763 3238 2792 2424 2124 1881 1689 1536 1417 1323 1250 1193 1149 1114 1087 1066 1048 "
   add_to_reg  $reg  63 45 "1070 1092 1121 1156 1202 1261 1336 1434 1557 1713 1911 2158 2469 2852 3320 3880 4530 5238 5911 6350 6323 5820 5086 4353 3711 3172 2725 2360 2070 1836 1653 1507 1394 1305 1236 1182 1141 1108 1083 1061 "
   add_to_reg  $reg  64 45 "1058 1076 1101 1131 1170 1220 1283 1367 1472 1607 1779 1996 2269 2612 3034 3551 4173 4898 5685 6374 6667 6374 5686 4899 4173 3551 3034 2612 2270 1996 1779 1607 1472 1367 1283 1220 1170 1131 1101 1076 "
   add_to_reg  $reg  65 45 "1046 1062 1082 1108 1141 1182 1236 1305 1395 1507 1652 1837 2070 2361 2724 3171 3711 4352 5086 5820 6324 6349 5911 5239 4531 3881 3321 2853 2469 2158 1910 1712 1557 1433 1336 1261 1202 1156 1121 1092 "
   add_to_reg  $reg  66 45 "1034 1049 1066 1087 1114 1149 1193 1250 1323 1417 1536 1688 1882 2124 2424 2792 3237 3763 4363 4996 5531 5785 5664 5245 4679 4087 3536 3054 2647 2310 2038 1817 1642 1502 1392 1306 1238 1185 1143 1110 "
   add_to_reg  $reg  67 45 "1025 1037 1051 1070 1092 1120 1156 1201 1262 1336 1434 1557 1714 1909 2152 2447 2803 3219 3691 4192 4662 4995 5091 4930 4573 4115 3636 3183 2781 2437 2151 1915 1724 1570 1448 1350 1275 1213 1166 1129 "
   add_to_reg  $reg  68 45 "1018 1027 1039 1054 1073 1096 1125 1161 1209 1269 1346 1444 1569 1723 1914 2148 2428 2753 3119 3509 3894 4215 4405 4418 4254 3961 3597 3214 2850 2520 2236 1995 1796 1634 1501 1395 1311 1243 1191 1148 "
   add_to_reg  $reg  69 45 "1011 1018 1028 1041 1056 1076 1099 1128 1165 1213 1273 1350 1446 1568 1717 1898 2115 2366 2649 2954 3261 3539 3747 3846 3818 3668 3429 3141 2839 2548 2283 2050 1852 1684 1548 1436 1344 1272 1214 1168 "
   add_to_reg  $reg  70 45 "1007 1011 1019 1029 1042 1058 1077 1100 1129 1166 1214 1273 1347 1441 1556 1696 1861 2053 2270 2507 2749 2978 3173 3304 3350 3303 3173 2980 2753 2515 2284 2073 1884 1722 1584 1471 1376 1299 1236 1188 "
   add_to_reg  $reg  71 45 "1004 1007 1012 1019 1030 1043 1058 1078 1100 1129 1166 1211 1268 1339 1427 1533 1659 1805 1971 2154 2343 2529 2698 2830 2910 2924 2871 2761 2606 2428 2242 2059 1891 1740 1607 1495 1400 1321 1257 1204 "
   add_to_reg  $reg  72 45 "1002 1005 1008 1011 1020 1031 1042 1058 1078 1099 1126 1162 1206 1260 1325 1405 1501 1611 1738 1877 2024 2174 2314 2434 2524 2569 2566 2515 2422 2301 2160 2012 1869 1735 1614 1507 1415 1338 1273 1218 "
   add_to_reg  $reg  73 45 "1002 1002 1005 1008 1013 1019 1029 1043 1057 1076 1097 1123 1156 1197 1247 1306 1379 1463 1557 1663 1778 1895 2009 2114 2199 2257 2282 2270 2224 2147 2049 1938 1823 1711 1604 1507 1421 1347 1284 1231 "
   add_to_reg  $reg  74 45 "1000 1002 1003 1005 1008 1012 1019 1028 1040 1056 1073 1094 1118 1150 1187 1231 1285 1347 1419 1501 1587 1679 1772 1858 1935 1994 2032 2043 2027 1985 1923 1846 1759 1668 1580 1495 1418 1348 1288 1237 "
   add_to_reg  $reg  75 45 "1000 1001 1002 1002 1004 1007 1011 1018 1028 1040 1053 1070 1090 1112 1140 1174 1214 1261 1315 1376 1443 1513 1586 1657 1723 1778 1819 1842 1846 1829 1793 1743 1681 1612 1540 1470 1403 1341 1286 1238 "
   add_to_reg  $reg  76 45 "1000 1000 1000 1002 1002 1004 1007 1011 1018 1027 1037 1051 1067 1084 1106 1130 1160 1196 1237 1282 1333 1387 1444 1501 1555 1604 1644 1671 1685 1684 1667 1637 1596 1547 1492 1436 1380 1328 1279 1235 "
   add_to_reg  $reg  77 45 "1000 1000 1000 1001 1002 1002 1004 1007 1011 1017 1025 1035 1047 1062 1080 1097 1119 1145 1177 1211 1248 1291 1336 1380 1424 1465 1501 1530 1548 1557 1552 1537 1511 1477 1439 1396 1351 1308 1265 1227 "
   add_to_reg  $reg  78 45 "1000 1000 1000 1000 1000 1001 1002 1004 1007 1010 1016 1023 1031 1043 1058 1071 1090 1108 1131 1157 1186 1218 1252 1288 1323 1356 1387 1414 1435 1447 1450 1445 1431 1411 1382 1351 1318 1283 1248 1215 "
   add_to_reg  $reg  79 45 "1000 1000 1000 1000 1000 1000 1001 1002 1004 1005 1010 1014 1019 1029 1038 1051 1066 1081 1098 1118 1140 1164 1191 1217 1244 1273 1298 1322 1341 1354 1362 1364 1358 1345 1328 1306 1281 1255 1228 1200 "
   add_to_reg  $reg  80 45 "1000 1000 1000 1000 1000 1000 1000 1001 1002 1003 1005 1007 1011 1019 1025 1034 1046 1058 1073 1086 1104 1122 1142 1162 1185 1207 1228 1249 1265 1279 1289 1295 1294 1288 1277 1264 1245 1226 1204 1183 "
   add_to_reg  $reg  81 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1002 1002 1003 1007 1011 1015 1022 1030 1040 1052 1064 1076 1090 1106 1122 1140 1157 1174 1191 1206 1219 1229 1235 1238 1235 1231 1223 1211 1196 1180 1164 "
   add_to_reg  $reg  82 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1002 1002 1004 1005 1009 1014 1018 1025 1035 1044 1055 1066 1078 1091 1104 1118 1133 1146 1158 1170 1179 1185 1191 1192 1190 1185 1178 1168 1157 1145 "
   add_to_reg  $reg  83 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1002 1003 1005 1008 1011 1015 1022 1028 1037 1046 1057 1067 1079 1088 1100 1111 1122 1132 1139 1146 1151 1153 1155 1152 1149 1142 1135 1125 "
   add_to_reg  $reg  84 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1002 1002 1003 1005 1009 1012 1018 1024 1031 1040 1048 1055 1064 1075 1084 1091 1100 1108 1115 1119 1123 1123 1124 1123 1119 1114 1108 "
   add_to_reg  $reg  85 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1002 1002 1003 1005 1007 1010 1014 1019 1025 1031 1038 1046 1055 1062 1069 1076 1082 1088 1093 1096 1098 1099 1099 1098 1095 1090 "
   add_to_reg  $reg  86 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1002 1002 1003 1004 1005 1008 1011 1015 1019 1025 1032 1038 1044 1050 1056 1062 1067 1071 1075 1079 1080 1080 1079 1077 1075 "
   add_to_reg  $reg  87 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1001 1002 1002 1004 1006 1008 1011 1016 1020 1025 1031 1034 1040 1045 1049 1054 1057 1061 1063 1063 1064 1063 1061 "
   add_to_reg  $reg  88 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1001 1002 1002 1003 1004 1006 1008 1011 1014 1019 1022 1026 1031 1035 1039 1043 1045 1046 1049 1049 1049 1049 "
   add_to_reg  $reg  89 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1002 1002 1002 1003 1004 1005 1008 1010 1013 1017 1018 1022 1025 1029 1031 1034 1036 1037 1037 1037 "
   add_to_reg  $reg  90 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1001 1001 1002 1002 1003 1005 1005 1008 1009 1011 1014 1016 1018 1020 1022 1024 1025 1027 1026 "
   add_to_reg  $reg  91 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1001 1001 1001 1002 1002 1002 1004 1005 1006 1008 1009 1011 1012 1014 1015 1016 1017 1017 "
   add_to_reg  $reg  92 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1000 1001 1001 1001 1002 1002 1002 1003 1003 1005 1005 1005 1007 1008 1009 1009 1010 "
   add_to_reg  $reg  93 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1000 1000 1001 1001 1002 1002 1001 1002 1003 1002 1004 1004 1005 1005 1005 "
   add_to_reg  $reg  94 45 "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1001 1000 1001 1001 1001 1002 1001 1002 1002 1002 1002 1002 1002 "

   set type "centroid"
   
   return $reg;
}

#
# Sort peak lists by peak height, then row, then column
#
proc compar {a b} {
   if {[lindex $a 2] < [lindex $b 2]} {
      return 1
   } elseif {[lindex $a 2] > [lindex $b 2]} {
      return -1
   } else {
      if {[lindex $a 1] < [lindex $b 1]} {
	 return 1
      } elseif {[lindex $a 1] > [lindex $b 1]} {
	 return -1
      } else {
	 if {[lindex $a 0] < [lindex $b 0]} {
	    return 1
	 } elseif {[lindex $a 0] > [lindex $b 0]} {
	    return -1
	 } else {
	    return 0
	 }
      }
   }
}
#
# check if the peak list is correct
#
proc check_peaks {test _list0 _list1} {
   upvar $_list0 list0  $_list1 list1

   set delta 0.01;			# allowed error in row or column
   set nerr 0

   set list0 [lsort -command compar $list0]
   set list1 [lsort -command compar $list1]
   
   set npeak0 [llength $list0]
   set npeak1 [llength $list1]
   if {$npeak0 < $npeak1} {
      incr nerr
      echo "TEST-ERR:" \
	  "found [expr $npeak1-$npeak0] extra peaks for test $test"
   } elseif {$npeak1 < $npeak0} {
      incr nerr
      echo "TEST-ERR:" \
	  "missed [expr $npeak0-$npeak1] peaks for test $test"
      set npeak0 $npeak1
   }
   
   loop i 0 $npeak0 {
      set peak0 [lindex $list0 $i]
      set peak1 [lindex $list1 $i]

      if {[expr abs([lindex $peak0 0]-[lindex $peak1 0])] > $delta || \
	      [expr abs([lindex $peak0 1]-[lindex $peak1 1])] > $delta} {
	 echo "TEST-ERR: peak $i for test $test doesn't match up"
	 incr nerr
      } elseif {[lindex $peak0 2] != [lindex $peak1 2]} {
	 echo "TEST-ERR: peak $i for test $test has wrong peak value"
	 incr nerr
      }
   }

   return $nerr;
}
#
# Utility routine to superimpose two peak lists on a region; peaks0 is
# drawn as x's, and peaks1 as +'s
#
proc show_peak_list {{_peaks0 peaks0} {_peaks1 peaks}} {
   upvar $_peaks0 peaks0  $_peaks1 peaks1

   set l 0.9;				# length of crosses' arms
   set s2 [expr $l/sqrt(2.0)]
   
   foreach peak $peaks0 {
      set rowc [lindex $peak 0]
      set colc [lindex $peak 1]
      saoDrawPolygon \
	  [expr $rowc-$s2] [expr $colc-$s2] [expr $rowc+$s2] [expr $colc+$s2]
      saoDrawPolygon \
	  [expr $rowc-$s2] [expr $colc+$s2] [expr $rowc+$s2] [expr $colc-$s2]
   }

   foreach peak $peaks1 {
      set rowc [lindex $peak 0]
      set colc [lindex $peak 1]
      saoDrawPolygon \
	  [expr $rowc-$l] $colc [expr $rowc+$l] $colc
      saoDrawPolygon \
	  $rowc [expr $colc-$l] $rowc [expr $colc+$l]
   }
}
#
#
# Do the tests
#
set sky 100

set fieldparams [fieldparamsNew "r"]
set fparams [handleBindFromHandle [handleNew] $fieldparams.frame<0>]
handleSet $fparams.bkgd 0
handleSet $fparams.gain 1
handleSet $fparams.dark_variance 0
if {[overlayN] == 0} {
   overlayAdd [regNew 500 500]
   overlayGet scr 500 500; regClear $scr
   set scrs [overlaySplit scr 2 2]
   set scr0 [lindex $scrs 0]
   set scr1 [lindex $scrs 1]
   set scr2 [lindex $scrs 2]
   set scr3 [lindex $scrs 3]
}
deblendSet $scr0 $scr1 $scr2 $scr3

set retval 0

if {![info exists tests]} {
   set tests "0 1 2 3 4 5 6 6a 6b 6c 7 8 ellip"
}
foreach test $tests {
   echo "measuring object $test"
#
# create data
#
   eval "set reg \[make_region_$test peaks0 type\]"

   if [eval info exists delta_$test] {
      eval set delta \$delta_$test
   } else {
      set delta 1
   }
   
   catch {unset om}
   if {$type == "finder"} {		# run object finder
      set om [find_objmask $reg]
      set peaks [objectPeaksFind $reg -obj $om -delta $delta]
   } elseif {[regexp {cull:([0-9]*)} $type "" val]} {	# run object finder
      					                # and cull peaks
      set om [find_objmask $reg]
      set peaks [objectPeaksFind $reg -obj $om -delta $delta]
      peaksCull $reg $peaks $om -thresh [expr $sky + 10] $val
   } elseif {$type == "all"} {		# find all peaks in region
      set peaks [objectPeaksFind $reg -delta $delta]
   } elseif {$type == "centroid"} {	# centroid all peaks in region
      set peaks [objectPeaksFind $reg -delta $delta]
      loop i 0 [exprGet $peaks.npeak] {
	 peakCenterFit $reg *$peaks.peaks<$i> -sky $sky -maxbin 32
      }
   } else {
      error "Unknown type: $type"
   }

   set peaklist "";		# convert PEAKS to tcl list
   loop i 0 [exprGet $peaks.npeak] {
      lappend peaklist [list \
			 [exprGet $peaks.peaks<$i>->rowc] \
			 [exprGet $peaks.peaks<$i>->colc] \
			 [exprGet $peaks.peaks<$i>->peak] \
			 ]
   }
   peaksDel $peaks; set peaks $peaklist

   if {[set nerr [check_peaks $test peaks0 peaks]] > 0} {
      echo "TEST-ERR: objectPeaksFind failed on object $test"
      if {[info exists abort_on_error] && $abort_on_error} {
	 error "Set \$reg, \$om, \$peaks0, and \$peaks"
      }
   }

   set retval [expr $retval+$nerr]

   if [info exists om] {
      objmaskDel $om
   }
   regDel $reg
}
#
# clean up
#
deblendUnset
overlayReleaseAll; overlayDelAll
handleDel $fparams
fieldparamsDel $fieldparams

if $retval {
   error "Failed $retval tests"
}
